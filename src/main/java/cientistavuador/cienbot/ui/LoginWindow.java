package cientistavuador.cienbot.ui;

import cientistavuador.cienbot.Main;
import cientistavuador.cienbot.storage.InvalidPasswordException;
import cientistavuador.cienbot.storage.Packet;
import cientistavuador.cienbot.storage.PacketCipherFileStream;
import java.awt.Toolkit;
import java.io.File;
import java.io.IOException;
import java.io.PrintStream;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.InvalidPathException;
import java.nio.file.Path;
import java.nio.file.StandardCopyOption;
import java.util.Arrays;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Cien
 */
@SuppressWarnings("serial")
public class LoginWindow extends javax.swing.JFrame {
    
    /**
     * Creates new form LoginWindow
     */
    public LoginWindow() {
        initComponents();
        setLocationRelativeTo(null);
        setDatabasePath(Path.of("databases", "CienBOT.bin"));
        loadDatabasePath();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        pathField = new javax.swing.JTextField();
        selectPath = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        password = new javax.swing.JPasswordField();
        openDatabaseButton = new javax.swing.JButton();
        confirmPasswordLabel = new javax.swing.JLabel();
        confirmPassword = new javax.swing.JPasswordField();
        showPassword = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CienBOT - Login");
        setIconImage(Main.CIENBOT_ICON.getImage());
        setMinimumSize(new java.awt.Dimension(300, 200));

        jLabel1.setText("Caminho do Banco de Dados:");

        pathField.setEditable(false);
        pathField.setText("jTextField1");

        selectPath.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cientistavuador/cienbot/ui/folder.png"))); // NOI18N
        selectPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectPathActionPerformed(evt);
            }
        });

        jLabel2.setText("Senha do Banco de Dados:");

        openDatabaseButton.setText("Abrir");
        openDatabaseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openDatabaseButtonActionPerformed(evt);
            }
        });

        confirmPasswordLabel.setText("Confirmar Senha:");
        confirmPasswordLabel.setEnabled(false);

        confirmPassword.setEnabled(false);

        showPassword.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        showPassword.setText("123");
        showPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showPasswordActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(confirmPassword)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(pathField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectPath))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(confirmPasswordLabel))
                        .addGap(0, 155, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(openDatabaseButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(password)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(showPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(selectPath, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pathField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(showPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addComponent(confirmPasswordLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(confirmPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addComponent(openDatabaseButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void selectPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectPathActionPerformed
        JFileChooser chooser = new JFileChooser(new File("").getAbsoluteFile());
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        chooser.setDialogType(JFileChooser.SAVE_DIALOG);
        chooser.setMultiSelectionEnabled(false);
        int result = chooser.showSaveDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selected = chooser.getSelectedFile();
            if (selected != null) {
                Path selectedPath = selected.getAbsoluteFile().toPath();
                if (!selectedPath.getFileName().toString().contains(".")) {
                    selectedPath = selectedPath.getParent()
                            .resolve(selectedPath.getFileName().toString() + ".bin");
                }
                setDatabasePath(selectedPath);
            }
        }
    }//GEN-LAST:event_selectPathActionPerformed

    private void loadDatabasePath() {
        try {
            Path file = Path.of("lastDatabasePath.txt");
            if (!Files.isRegularFile(file)) {
                return;
            }
            try {
                setDatabasePath(Path.of(Files.readString(file, StandardCharsets.UTF_8)));
            } catch (InvalidPathException ex) {
                ex.printStackTrace(System.out);
            }
        } catch (IOException ex) {
            ex.printStackTrace(System.out);
        }
    }

    private void saveDatabasePath() {
        try {
            Files.writeString(
                    Path.of("lastDatabasePath.txt"),
                    this.pathField.getText(),
                    StandardCharsets.UTF_8);
        } catch (IOException ex) {
            ex.printStackTrace(System.out);
        }
    }

    private void openDatabaseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openDatabaseButtonActionPerformed
        char[] pw = this.password.getPassword();
        try {
            Path path = Path.of(this.pathField.getText());
            if (!Files.exists(path) && !this.confirmPassword.isEnabled()) {
                Toolkit.getDefaultToolkit().beep();
                setDatabasePath(path);
                return;
            }
            
            if (this.confirmPassword.isEnabled()) {
                char[] toConfirm = this.confirmPassword.getPassword();
                try {
                    if (!Arrays.equals(pw, toConfirm)) {
                        Toolkit.getDefaultToolkit().beep();
                        JOptionPane.showMessageDialog(
                                this,
                                "As senhas n達o s達o iguais, por favor tente novamente",
                                "As senhas n達o s達o iguais",
                                JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                } finally {
                    Arrays.fill(toConfirm, '\0');
                }
            }
            
            PacketCipherFileStream s = new PacketCipherFileStream(path) {
                @Override
                public void onPacketRead(Packet p) throws IOException {
                    LoginWindow.this.onPacketRead(p);
                }
            };

            try {
                setVisible(false);
                
                s.init(pw);
                Path backupFile = path.getParent().resolve(path.getFileName().toString()+".bak");
                Files.copy(s.getFile(), backupFile, StandardCopyOption.REPLACE_EXISTING);
                LoginWindow.this.onFileStreamCreated(s);
                
                this.password.setText("");
                this.confirmPassword.setText("");

                saveDatabasePath();
                dispose();
            } catch (InvalidPasswordException ex) {
                setVisible(true);

                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(
                        this,
                        "Senha incorreta, por favor tente novamente",
                        "Senha incorreta",
                        JOptionPane.ERROR_MESSAGE);
            } catch (Throwable t) {
                setVisible(true);
                
                handleError(t);
            }
        } finally {
            Arrays.fill(pw, '\0');
        }
    }//GEN-LAST:event_openDatabaseButtonActionPerformed

    private void showPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showPasswordActionPerformed
        boolean visible = this.showPassword.getText().equals("***");
        if (visible) {
            this.showPassword.setText("123");
            this.password.setEchoChar(this.confirmPassword.getEchoChar());
        } else {
            this.showPassword.setText("***");
            this.password.setEchoChar((char) 0);
        }
    }//GEN-LAST:event_showPasswordActionPerformed

    public void onFileStreamCreated(PacketCipherFileStream stream) {

    }

    public void onPacketRead(Packet p) throws IOException {

    }

    private void handleError(Throwable t) {
        t.printStackTrace(System.err);
        Toolkit.getDefaultToolkit().beep();
        JOptionPane.showMessageDialog(
                this,
                t.getClass().getName() + ": " + t.getLocalizedMessage(),
                "Erro", JOptionPane.ERROR_MESSAGE);
        int saveLogResult = JOptionPane.showConfirmDialog(
                this,
                "Gostaria de salvar o log do erro?",
                "Salvar log do erro",
                JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);
        if (saveLogResult == JOptionPane.YES_OPTION) {
            JFileChooser chooser = new JFileChooser(new File("").getAbsoluteFile());
            chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
            chooser.setDialogType(JFileChooser.SAVE_DIALOG);
            chooser.setMultiSelectionEnabled(false);
            int result = chooser.showSaveDialog(this);
            if (result == JFileChooser.APPROVE_OPTION) {
                File selected = chooser.getSelectedFile();
                if (selected != null) {
                    Path selectedPath = selected.getAbsoluteFile().toPath();
                    if (!selectedPath.getFileName().toString().contains(".")) {
                        selectedPath = selectedPath.getParent()
                                .resolve(selectedPath.getFileName().toString() + ".log");
                    }
                    try {
                        try (PrintStream stream = new PrintStream(selectedPath.toFile(), StandardCharsets.UTF_8)) {
                            t.printStackTrace(stream);
                        }
                    } catch (IOException ex) {
                        ex.printStackTrace(System.err);
                    }
                }
            }
        }
    }

    private void setDatabasePath(Path path) {
        path = path.toAbsolutePath();
        this.pathField.setText(path.toString());

        if (!Files.exists(path)) {
            this.confirmPasswordLabel.setEnabled(true);
            this.confirmPassword.setEnabled(true);

            this.openDatabaseButton.setEnabled(true);
            this.openDatabaseButton.setText("Criar");
            return;
        }

        this.confirmPasswordLabel.setEnabled(false);
        this.confirmPassword.setEnabled(false);

        this.openDatabaseButton.setEnabled(Files.isRegularFile(path));
        this.openDatabaseButton.setText("Abrir");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPasswordField confirmPassword;
    private javax.swing.JLabel confirmPasswordLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton openDatabaseButton;
    private javax.swing.JPasswordField password;
    private javax.swing.JTextField pathField;
    private javax.swing.JButton selectPath;
    private javax.swing.JButton showPassword;
    // End of variables declaration//GEN-END:variables
}
